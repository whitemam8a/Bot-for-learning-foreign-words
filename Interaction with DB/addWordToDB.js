const { Keyboard } = require("grammy");
const Database = require("better-sqlite3");
const db = new Database("words.db");

function getStartKeyboard() {
  return new Keyboard().text("–£—á–∏—Ç—å —Å–ª–æ–≤–∞").text("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ").resized();
}

function cancelKeyboard() {
  return new Keyboard().text("‚ùå –û—Ç–º–µ–Ω–∞").resized().oneTime();
}

async function addWordConversation(conversation, ctx) {
  async function getInput(question) {
    await ctx.reply(question, {
      reply_markup: cancelKeyboard(),
    });

    const input = await conversation.waitFor(":text");
    if (input.msg.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
      await ctx.reply("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!", {
        reply_markup: { remove_keyboard: true },
      });

      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?üëá", {
        reply_markup: getStartKeyboard(),
      });

      return null;
    }
    return input.msg.text.trim();
  }

  // –®–∞–≥ 1: –õ–∞—Ç—ã—à—Å–∫–æ–µ —Å–ª–æ–≤–æ
  const lvWord = await getInput("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –ª–∞—Ç—ã—à—Å–∫–æ–º:");
  if (!lvWord) return;

  // –®–∞–≥ 2: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
  const ruCorrect = await getInput("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:");
  if (!ruCorrect) return;

  // –®–∞–≥ 3: –ü–µ—Ä–≤—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
  const ruWrong1 = await getInput("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:");
  if (!ruWrong1) return;

  // –®–∞–≥ 4: –í—Ç–æ—Ä–æ–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
  const ruWrong2 = await getInput("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:");
  if (!ruWrong2) return;

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
  try {
    const insert = db.transaction(() => {
      const wordInsert = db
        .prepare(
          `
        INSERT INTO words (word) 
        VALUES (?)
      `
        )
        .run(lvWord);

      const wordId = wordInsert.lastInsertRowid;

      const options = [
        { translateWord: ruCorrect, isCorrect: 1 },
        { translateWord: ruWrong1, isCorrect: 0 },
        { translateWord: ruWrong2, isCorrect: 0 },
      ];

      const optionInsert = db.prepare(`
        INSERT INTO options (word_id, translate_word, is_correct)
        VALUES (?, ?, ?)
      `);

      options.forEach((opt) => {
        optionInsert.run(wordId, opt.translateWord, opt.isCorrect);
      });
    });

    insert();

    await ctx.reply("‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", {
      reply_markup: getStartKeyboard(),
    });
  } catch (e) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " + e.message);
  }
}

module.exports = { addWordConversation };
